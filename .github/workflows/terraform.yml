# Enhanced GitHub Actions workflow for Terraform vulnerability scanning with Checkov
name: Terraform Security Scan

on:
  # Run on every push to any branch
  push:
  # Run on pull requests to main/master branches
  pull_request:
    branches: [ main, master ]

jobs:
  checkov-scan:
    name: Checkov Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper scanning
      
      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      # Step 3: Install Checkov and additional tools
      - name: Install security scanning tools
        run: |
          pip install checkov
          pip install jq pyyaml tabulate
          
      # Step 4: Create results directory
      - name: Prepare results directory
        run: |
          mkdir -p scan-results/terraform
          mkdir -p scan-results/full
          mkdir -p scan-results/reports
      
      # Step 5: Find all Terraform files and create a file index
      - name: Index Terraform files
        run: |
          echo "# Terraform Files Index" > scan-results/terraform-files-index.md
          echo "Files found at $(date)" >> scan-results/terraform-files-index.md
          echo "" >> scan-results/terraform-files-index.md
          echo "| File Path | Lines | Last Modified |" >> scan-results/terraform-files-index.md
          echo "|-----------|-------|---------------|" >> scan-results/terraform-files-index.md
          
          # Find all terraform files and add to index with line count and last modified date
          find . -type f -name "*.tf" -o -name "*.tfvars" | sort | while read -r file; do
            LINES=$(wc -l < "$file")
            MODIFIED=$(git log -1 --format="%ad" --date=short -- "$file" 2>/dev/null || echo "N/A")
            echo "| \`$file\` | $LINES | $MODIFIED |" >> scan-results/terraform-files-index.md
          done
          
          # Count total Terraform files
          TF_FILES=$(find . -type f -name "*.tf" -o -name "*.tfvars" | wc -l)
          echo "" >> scan-results/terraform-files-index.md
          echo "**Total Terraform Files:** $TF_FILES" >> scan-results/terraform-files-index.md
          
          cat scan-results/terraform-files-index.md
      
      # Step 6: Run Checkov scan for Terraform with detailed output
      - name: Run Terraform security scan
        id: terraform-scan
        continue-on-error: true
        run: |
          # Run Checkov with multiple output formats
          checkov --directory . \
            --framework terraform \
            --output cli \
            --output json \
            --output-file-path scan-results/terraform/results \
            --summary-position bottom
          
          echo "tf_scan_status=$?" >> $GITHUB_OUTPUT
          
          if [ -f ./scan-results/terraform/results.json ]; then
            echo "✓ Terraform scan complete - results saved"
          else
            echo "No Terraform files found or scan failed to produce results"
            echo "{\"results\": {\"failed_checks\": []}}" > ./scan-results/terraform/results.json
          fi
      
      # Step 7: Run comprehensive scan for all IaC frameworks
      - name: Run comprehensive IaC scan
        id: full-scan
        continue-on-error: true
        run: |
          # Run full scan with all supported frameworks
          checkov --directory . \
            --output cli \
            --output json \
            --output-file-path scan-results/full/results \
            --summary-position bottom
          
          echo "full_scan_status=$?" >> $GITHUB_OUTPUT
          
          if [ -f ./scan-results/full/results.json ]; then
            echo "✓ Comprehensive scan complete - results saved"
          else
            echo "Scan failed to produce results"
            echo "{\"results\": {\"failed_checks\": []}}" > ./scan-results/full/results.json
          fi
      
      # Step 8: Generate enhanced vulnerability report with file-specific issues
      - name: Generate enhanced vulnerability report
        run: |
          # Create main report file
          cat > scan-results/reports/security-report.md << 'EOL'
          # Infrastructure Security Scan Report
          
          ## Overview
          
          This report contains security findings from scanning infrastructure-as-code files in this repository.
          Scan completed at: $(date)
          
          ## Executive Summary
          EOL
          
          # Process Terraform scan results for summary stats
          if [ -f ./scan-results/terraform/results.json ]; then
            # Extract statistics using grep on the CLI output (more reliable than JSON parsing in bash)
            PASSED=$(grep -o "Passed checks: [0-9]*" ./scan-results/terraform/results.cli 2>/dev/null | awk '{print $3}')
            FAILED=$(grep -o "Failed checks: [0-9]*" ./scan-results/terraform/results.cli 2>/dev/null | awk '{print $3}')
            SKIPPED=$(grep -o "Skipped checks: [0-9]*" ./scan-results/terraform/results.cli 2>/dev/null | awk '{print $3}')
            
            # Set default values if grep finds nothing
            PASSED=${PASSED:-0}
            FAILED=${FAILED:-0}
            SKIPPED=${SKIPPED:-0}
            
            # Add executive summary to report
            cat >> scan-results/reports/security-report.md << EOL
          
          ### Terraform Security Posture
          
          | Metric | Count |
          |--------|-------|
          | ✅ Passed checks | ${PASSED} |
          | ❌ Failed checks | ${FAILED} |
          | ⚠️ Skipped checks | ${SKIPPED} |
          
          EOL
            
            # Add severity breakdown if there are failures
            if [ "$FAILED" -gt 0 ]; then
              # Count issues by severity from the JSON file with simple tools
              HIGH=$(grep -o "\"severity\": \"HIGH\"" ./scan-results/terraform/results.json | wc -l)
              MEDIUM=$(grep -o "\"severity\": \"MEDIUM\"" ./scan-results/terraform/results.json | wc -l)
              LOW=$(grep -o "\"severity\": \"LOW\"" ./scan-results/terraform/results.json | wc -l)
              
              cat >> scan-results/reports/security-report.md << EOL
          ### Security Issues by Severity
          
          | Severity | Count |
          |----------|-------|
          | 🔴 High | ${HIGH} |
          | 🟠 Medium | ${MEDIUM} |
          | 🟡 Low | ${LOW} |
          
          EOL
            fi
          else
            echo "No Terraform scan results available" >> scan-results/reports/security-report.md
          fi
          
          # Create file-specific security issue report section
          cat >> scan-results/reports/security-report.md << 'EOL'
          
          ## File-Specific Security Issues
          
          The following files contain security issues that need to be addressed:
          
          EOL
          
          # Extract issues by file from the CLI output
          if [ -f ./scan-results/terraform/results.cli ]; then
            # Use awk to parse the CLI output and group issues by file
            awk '
            /Check: / { check=$0 }
            /FAILED for resource:/ { resource=$0 }
            /File:/ { 
              file=$0; 
              sub(/.*File: /, "", file);
              files[file] = files[file] ? files[file] "\n" check "\n" resource : check "\n" resource;
              count[file]++;
            }
            END {
              for (f in files) {
                print "### " f " (" count[f] " issues)\n";
                print "```";
                print files[f];
                print "```\n";
              }
            }' ./scan-results/terraform/results.cli > scan-results/reports/file-issues.md
            
            # Check if any issues were found and add to main report
            if [ -s scan-results/reports/file-issues.md ]; then
              cat scan-results/reports/file-issues.md >> scan-results/reports/security-report.md
            else
              echo "No file-specific issues found." >> scan-results/reports/security-report.md
            fi
          else
            echo "No detailed scan results available." >> scan-results/reports/security-report.md
          fi
          
          # Create remediation advice section
          cat >> scan-results/reports/security-report.md << 'EOL'
          
          ## Top Security Issues and Remediation Steps
          
          EOL
          
          # Extract top issues and add remediation guidance
          if [ -f ./scan-results/terraform/results.cli ] && [ "$FAILED" -gt 0 ]; then
            # Extract unique check IDs and descriptions
            grep -A 1 "Check:" ./scan-results/terraform/results.cli | grep -v -- "--" | sort | uniq > scan-results/unique-checks.txt
            
            # Process each unique check and add remediation guidance
            while read -r line; do
              if [[ $line == *"Check:"* ]]; then
                CHECK_ID=$(echo "$line" | sed -n 's/.*Check: \([^:]*\).*/\1/p')
                CHECK_DESC=$(echo "$line" | sed -n 's/.*Check: [^:]*: "\(.*\)"/\1/p')
                
                echo "### $CHECK_ID: $CHECK_DESC" >> scan-results/reports/security-report.md
                echo "" >> scan-results/reports/security-report.md
                
                # Add remediation guidance based on check ID
                case "$CHECK_ID" in
                  *"ENCRYPTION"*)
                    echo "**Remediation:** Enable encryption for this resource. Use AWS KMS or similar service for key management." >> scan-results/reports/security-report.md
                    ;;
                  *"PUBLIC_ACCESS"*)
                    echo "**Remediation:** Restrict public access by setting appropriate access controls and security groups." >> scan-results/reports/security-report.md
                    ;;
                  *"IAM"*)
                    echo "**Remediation:** Review and tighten IAM permissions following the principle of least privilege." >> scan-results/reports/security-report.md
                    ;;
                  *"LOGGING"*)
                    echo "**Remediation:** Enable logging and monitoring for this resource to improve security visibility." >> scan-results/reports/security-report.md
                    ;;
                  *)
                    echo "**Remediation:** Review the resource configuration and apply security best practices." >> scan-results/reports/security-report.md
                    ;;
                esac
                echo "" >> scan-results/reports/security-report.md
              fi
            done < scan-results/unique-checks.txt
          else
            echo "No security issues to remediate. Great job!" >> scan-results/reports/security-report.md
          fi
          
          # Generate separate report for Pull Request comments
          cat scan-results/reports/security-report.md | head -n 30 > scan-results/reports/pr-comment.md
          echo "..." >> scan-results/reports/pr-comment.md
          echo "**See full report in workflow artifacts**" >> scan-results/reports/pr-comment.md
          
          # Display summary
          echo "Report generated successfully!"
          cat scan-results/reports/security-report.md
      
      # Step 9: Create HTML report for better visualization
      - name: Generate HTML report
        run: |
          # Create a simple HTML version of the report
          cat > scan-results/reports/security-report.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Terraform Security Scan Report</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 20px; color: #333; }
              h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
              h2 { color: #2980b9; margin-top: 30px; }
              h3 { color: #3498db; }
              table { border-collapse: collapse; width: 100%; margin: 20px 0; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
              tr:nth-child(even) { background-color: #f9f9f9; }
              .high { background-color: #ffdddd; }
              .medium { background-color: #ffffcc; }
              .low { background-color: #e6f3ff; }
              code { background-color: #f5f5f5; padding: 2px 5px; border-radius: 3px; font-family: monospace; }
              pre { background-color: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; }
            </style>
          </head>
          <body>
            <h1>Terraform Security Scan Report</h1>
            <p>Scan completed at: $(date)</p>
          EOL
          
          # Convert markdown to HTML (basic conversion)
          sed -n '/^## Overview/,$p' scan-results/reports/security-report.md | sed 's/^## \(.*\)/<h2>\1<\/h2>/g' | \
          sed 's/^### \(.*\)/<h3>\1<\/h3>/g' | \
          sed 's/\*\*\([^*]*\)\*\*/<strong>\1<\/strong>/g' | \
          sed 's/^| \(.*\) |/<table><tr><th>\1<\/th><\/tr>/g' | \
          sed 's/^|--------|/<tr><td>-----<\/td><\/tr>/g' | \
          sed 's/^| \(.*\) |/<tr><td>\1<\/td><\/tr>/g' | \
          sed 's/```/<pre>/g' | sed 's/```/<\/pre>/g' | \
          sed 's/^$/<p><\/p>/g' >> scan-results/reports/security-report.html
          
          echo "</body></html>" >> scan-results/reports/security-report.html
      
      # Step 10: Upload scan results as artifacts
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: scan-results/
          retention-days: 14
      
      # Step 11: Post summary comment on PR if this is a pull request
      - name: Post summary comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs');
            const prComment = fs.readFileSync('scan-results/reports/pr-comment.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: prComment
            });
      
      # Step 12: Set job status based on security issues
      - name: Set job status
        run: |
          # Determine exit code based on severity of findings
          if grep -q "\"severity\": \"HIGH\"" ./scan-results/terraform/results.json 2>/dev/null; then
            echo "::warning::🔴 HIGH severity security issues found! See scan results for details."
          elif grep -q "\"severity\": \"MEDIUM\"" ./scan-results/terraform/results.json 2>/dev/null; then
            echo "::warning::🟠 MEDIUM severity security issues found! See scan results for details."
          elif grep -q "\"severity\": \"LOW\"" ./scan-results/terraform/results.json 2>/dev/null; then
            echo "::notice::🟡 LOW severity security issues found. See scan results for details."
          else
            echo "::notice::✅ No security issues found. Great job!"
          fi
          
          echo "Security scan complete! Reports uploaded as workflow artifacts."

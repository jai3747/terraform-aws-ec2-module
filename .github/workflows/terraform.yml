# GitHub Actions workflow for Terraform vulnerability scanning with Checkov
name: Terraform Security Scan

on:
  # Run on every push to any branch
  push:
  # Run on pull requests to main/master branches
  pull_request:
    branches: [ main, master ]

jobs:
  checkov-scan:
    name: Checkov Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper scanning
      
      # Step 2: List all Terraform files for debugging
      - name: List Terraform files
        run: |
          echo "Looking for all Terraform files in the repository:"
          find . -type f -name "*.tf" -o -name "*.tfvars" | sort
          echo "---"
          
      # Step 3: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      # Step 4: Install Checkov
      - name: Install Checkov
        run: pip install checkov
      
      # Step 5: Clean up any previous scan results
      - name: Clean up any previous scan results
        run: |
          rm -rf scan-results
          mkdir -p scan-results
      
      # Step 6: Run Checkov scan for Terraform
      - name: Run Checkov scan for Terraform
        id: run-terraform-scan
        continue-on-error: true  # This ensures the workflow doesn't fail when issues are found
        run: |
          # Run Checkov directly with output to a specific file
          checkov --directory . --framework terraform --output cli --output json --output-file-path scan-results/terraform-results
          
          # Store exit code to determine if vulnerabilities were found
          echo "tf_scan_status=$?" >> $GITHUB_OUTPUT
          
          # Ensure the file exists (checkov outputs .json extension automatically)
          if [ -f ./scan-results/terraform-results.json ]; then
            echo "Scan completed and JSON results saved"
            # Save a CLI version for human-readable output
            checkov --directory . --framework terraform --output cli > ./scan-results/terraform-results.txt || true
          else
            echo "No terraform files found or scan produced no results"
            echo "{\"results\": {\"failed_checks\": []}}" > ./scan-results/terraform-results.json
            echo "No Terraform files found or scan failed." > ./scan-results/terraform-results.txt
          fi
      
      # Step 7: Run comprehensive scan for all IaC frameworks
      - name: Run comprehensive scan (all IaC)
        id: run-comprehensive-scan
        continue-on-error: true  # This ensures the workflow doesn't fail when issues are found
        run: |
          # Run scan with all frameworks
          checkov --directory . --output cli --output json --output-file-path scan-results/full-results
          
          # Store exit code to determine if vulnerabilities were found
          echo "full_scan_status=$?" >> $GITHUB_OUTPUT
          
          # Ensure the file exists
          if [ -f ./scan-results/full-results.json ]; then
            echo "Comprehensive scan completed and JSON results saved"
            # Save a CLI version for human-readable output
            checkov --directory . --output cli > ./scan-results/full-results.txt || true
          else
            echo "Comprehensive scan produced no results"
            echo "{\"results\": {\"failed_checks\": []}}" > ./scan-results/full-results.json
            echo "No IaC files found or scan failed." > ./scan-results/full-results.txt
          fi
      
      # Step 8: Create a detailed vulnerability report
      - name: Create vulnerability report
        run: |
          echo "## Checkov Security Scan Results" > ./scan-results/vulnerability-report.md
          echo "Scan completed at $(date)" >> ./scan-results/vulnerability-report.md
          echo "" >> ./scan-results/vulnerability-report.md
          
          echo "### Terraform Scan Summary" >> ./scan-results/vulnerability-report.md
          if [ -f ./scan-results/terraform-results.txt ]; then
            # Extract passed/failed counts
            PASSED_COUNT=$(grep -o "Passed checks: [0-9]*" ./scan-results/terraform-results.txt | awk '{print $3}')
            FAILED_COUNT=$(grep -o "Failed checks: [0-9]*" ./scan-results/terraform-results.txt | awk '{print $3}')
            SKIPPED_COUNT=$(grep -o "Skipped checks: [0-9]*" ./scan-results/terraform-results.txt | awk '{print $3}')
            
            echo "* **Passed checks:** ${PASSED_COUNT:-0}" >> ./scan-results/vulnerability-report.md
            echo "* **Failed checks:** ${FAILED_COUNT:-0}" >> ./scan-results/vulnerability-report.md
            echo "* **Skipped checks:** ${SKIPPED_COUNT:-0}" >> ./scan-results/vulnerability-report.md
            echo "" >> ./scan-results/vulnerability-report.md
            
            # Extract and list all failed checks with file paths
            if [ "${FAILED_COUNT:-0}" -gt 0 ]; then
              echo "### Failed Terraform Checks" >> ./scan-results/vulnerability-report.md
              echo "" >> ./scan-results/vulnerability-report.md
              echo "| Check ID | Resource | File Path | Description |" >> ./scan-results/vulnerability-report.md
              echo "|----------|----------|-----------|-------------|" >> ./scan-results/vulnerability-report.md
              
              # Process the results to extract file paths and check details
              grep -A 5 "FAILED for resource" ./scan-results/terraform-results.txt | while read -r line; do
                if [[ $line == *"Check:"* ]]; then
                  CHECK_ID=$(echo "$line" | sed -n 's/.*Check: \([^:]*\).*/\1/p')
                  CHECK_DESC=$(echo "$line" | sed -n 's/.*Check: [^:]*: "\(.*\)"/\1/p')
                elif [[ $line == *"FAILED for resource:"* ]]; then
                  RESOURCE=$(echo "$line" | sed -n 's/.*FAILED for resource: \(.*\)/\1/p')
                elif [[ $line == *"File:"* ]]; then
                  FILE_PATH=$(echo "$line" | sed -n 's/.*File: \(.*\)/\1/p')
                  echo "| $CHECK_ID | $RESOURCE | $FILE_PATH | $CHECK_DESC |" >> ./scan-results/vulnerability-report.md
                fi
              done
              echo "" >> ./scan-results/vulnerability-report.md
            fi
          else
            echo "No Terraform scan results available." >> ./scan-results/vulnerability-report.md
          fi
          
          # Add full scan results
          echo "### Comprehensive IaC Scan Summary" >> ./scan-results/vulnerability-report.md
          if [ -f ./scan-results/full-results.txt ]; then
            # Extract passed/failed counts from full scan
            FULL_PASSED_COUNT=$(grep -o "Passed checks: [0-9]*" ./scan-results/full-results.txt | awk '{print $3}')
            FULL_FAILED_COUNT=$(grep -o "Failed checks: [0-9]*" ./scan-results/full-results.txt | awk '{print $3}')
            FULL_SKIPPED_COUNT=$(grep -o "Skipped checks: [0-9]*" ./scan-results/full-results.txt | awk '{print $3}')
            
            echo "* **Passed checks:** ${FULL_PASSED_COUNT:-0}" >> ./scan-results/vulnerability-report.md
            echo "* **Failed checks:** ${FULL_FAILED_COUNT:-0}" >> ./scan-results/vulnerability-report.md
            echo "* **Skipped checks:** ${FULL_SKIPPED_COUNT:-0}" >> ./scan-results/vulnerability-report.md
            echo "" >> ./scan-results/vulnerability-report.md
            
            if [ "${FULL_FAILED_COUNT:-0}" -gt 0 ]; then
              echo "### Failed Checks (All IaC)" >> ./scan-results/vulnerability-report.md
              echo "See detailed scan results for more information." >> ./scan-results/vulnerability-report.md
            fi
          else
            echo "No comprehensive scan results available." >> ./scan-results/vulnerability-report.md
          fi
          
          cat ./scan-results/vulnerability-report.md
      
      # Step 9: Upload scan results as artifacts
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: scan-results/
          retention-days: 14
      
      # Step 10: Report findings but don't fail the pipeline
      - name: Report security issues summary
        run: |
          if [ "${{ steps.run-terraform-scan.outputs.tf_scan_status }}" != "0" ]; then
            echo "::warning::Security issues found in Terraform code! See scan results for details."
          fi
          
          if [ "${{ steps.run-comprehensive-scan.outputs.full_scan_status }}" != "0" ]; then
            echo "::warning::Security issues found in IaC files! See scan results for details."
          fi
          
          echo "All scan results have been uploaded as artifacts."
